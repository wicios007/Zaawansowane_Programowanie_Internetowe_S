//npx -p typescript tsc --init
//npm i -g typescript
//tsc index
//node index
//tsc --watch index
//Basic Types
let id: number = 5
let company: string = "Czestochowa university"
let isPublished: boolean = true
let x: any = 'Hello'

let ids: number[] = [1, 2, 3, 4, 5]
let arr: any[] = [1, true, 'hello']

//Typle you can specfify the types

let person: [number, string, boolean] = [1, 'ps', false]

//Tuple array
let employee: [number, string][]

employee = [
    [1, 'Bard'],
    [2, 'John'],
    [3, 'Jill']
]

//Union

let pid: string | number = 22

pid = '22'

//Enum
enum Direction1 {
    Up = 1,
    Down,
    Left,
    Right
}
//console.log(Direction1.Up)

enum Direction2 {
    'Up' = 'Up',
    'Down' = 'Down',
    'Left' = 'Left',
    'Right' = 'Right'
}
// console.log(Direction2.Up)

//Objects
// const user: {
//     id:number,
//     name:string
// } = {
//     id: 1,
//     name: 'John',
// }

type User = {
    id: number
    name: string
}

const user: User = {
    id: 1,
    name: 'John'
}

//Type Assertion

let cid: any = 1
// let customerId = <number>cid
let customerId = cid as number

// Functions

function addNum(x: number, y: number): number {
    return x + y
}
console.log(addNum(1, 2))

function log(message: string | number): void {
    console.log(message)
}
log(1)

// Interfaces 
interface UserInterface {
    readonly id: number
    name: string
    age?: number // question mark make the user1 object optional value not necessary to use but does not causes error
}

const user1: UserInterface = {
    id: 1,
    name: 'John',
}
type Point = number | string
const p1: Point = 1

// interface Point = number | string // incorrect
// const p1: Point = 1

interface MathFunc {
    (x: number, y: number): number
}
const add: MathFunc = (x: number, y: number): number => x + y
const sub: MathFunc = (x: number, y: number): number => x - y

console.log(add(5, 10))
console.log(sub(5, 10))

// Classes
interface PersonInterface {
    id: number
    name: string
    register(): string
}

class Person implements PersonInterface {
    id: number
    name: string
    constructor(id: number, name: string) {
        this.id = id
        this.name = name
    }
    register() {
        return (1 + "d")
    }
}
const brad = new Person(1, "Brad ch")
const mike = new Person(2, "Mike Jordan")

//console.log(brad.id) incorrect
console.log(brad.register())

class Employee extends Person {
    position: string

    constructor(id: number, name: string, position: string) {
        super(id, name)
        this.position = position
    }
}
const emp = new Employee(3, 'Shawn', 'Developer')

console.log(emp)

//Generics
function getArray<T>(items: T[]): T[] {
    return new Array().concat(items)
}

let numArray = getArray<number>([1, 2, 3, 4])
let strArray = getArray<string>(['brad', 'john', 'jill'])

numArray.push(60)